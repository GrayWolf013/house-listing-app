{"ast":null,"code":"import { reactive, toRefs, computed, onMounted, watchEffect } from \"vue\";\nimport { useStore } from \"vuex\";\nimport UploadImageComponent from \"./UploadImageComponent.vue\";\nexport default {\n  name: \"HouseListingForm\",\n  props: {\n    houseId: {\n      type: String,\n      required: false\n    }\n  },\n  setup(props, context) {\n    const store = useStore();\n    const state = reactive({\n      house: {},\n      errorMessage: \"\",\n      touchedFields: {} // object to track if each field has been touched or not\n    });\n\n    let hasGarage = null;\n    watchEffect(() => {\n      state.house.hasGarage = hasGarage;\n      hasGarage = state.house.hasGarage;\n    });\n    const isInvalid = computed(() => {\n      return field => {\n        // check if field is empty and has been touched by the user\n        return !state.house[field] && state.touchedFields[field];\n      };\n    });\n\n    // const submitButtonDisabled = computed(() => {\n    //   return (\n    //     !state.house.streetName ||\n    //     !state.house.houseNumber ||\n    //     !state.house.zip ||\n    //     !state.house.city ||\n    //     !state.house.price ||\n    //     !state.house.size ||\n    //     !state.house.bedrooms ||\n    //     !state.house.bathrooms ||\n    //     !state.house.constructionYear ||\n    //     !state.house.description ||\n    //     !isBool(state.house.hasGarage)\n    //   );\n    // });\n\n    const submitButtonDisabled = computed(() => {\n      const {\n        house\n      } = state;\n      return !Object.values(house).every(val => val || val === false);\n    });\n    function selectImage(data) {\n      context.emit(\"selectImage\", {\n        image: data.image,\n        previewImage: data.previewImage\n      });\n    }\n    function isYearFormat(inputNumber) {\n      // Convert inputNumber to a string\n      var inputString = inputNumber.toString();\n      // Check if inputString is a valid year format 'yyyy'\n      var yearRegex = /^\\d{4}$/;\n      if (!yearRegex.test(inputString)) {\n        return false;\n      }\n      // Check if input year is not before the current year\n      var inputYear = parseInt(inputString);\n      var currentYear = new Date().getFullYear();\n      if (!(inputYear < currentYear)) {\n        return false;\n      }\n      return true;\n    }\n\n    // function isBool(bool) {\n    //   if (typeof bool === \"boolean\") return true;\n    //   return false;\n    // }\n    // method to set the touched status of a field to true\n\n    function setFieldTouched(field) {\n      state.touchedFields = {\n        ...state.touchedFields,\n        [field]: true\n      };\n    }\n    function formInvalid() {\n      // Check if any required fields are empty\n      if (!state.house.streetName || !state.house.houseNumber || !state.house.zip || !state.house.city || !state.house.price || !state.house.size || !state.house.bedrooms || !state.house.bathrooms || !state.house.constructionYear || !state.house.description || !(typeof state.house.hasGarage === \"boolean\")) {\n        state.errorMessage = \"Please fill out all required fields.\";\n        return true;\n      }\n      if (!isYearFormat(state.house.constructionYear)) {\n        state.errorMessage = \"Please enter valid construction year.\";\n        return true;\n      }\n      return false;\n    }\n    function submitButtonClicked() {\n      if (!formInvalid()) context.emit(\"submitForm\", state.house);\n    }\n    onMounted(async () => {\n      if (props && props.houseId) {\n        const house = store.getters.getByIdEditModel(props.houseId);\n        state.house = house;\n        hasGarage = true;\n      }\n    });\n    return {\n      ...toRefs(state),\n      hasGarage,\n      submitButtonDisabled,\n      isInvalid,\n      setFieldTouched,\n      selectImage,\n      submitButtonClicked\n    };\n  },\n  components: {\n    UploadImageComponent\n  }\n};","map":{"version":3,"mappings":"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","names":["reactive","toRefs","computed","onMounted","watchEffect","useStore","UploadImageComponent","name","props","houseId","type","String","required","setup","context","store","state","house","errorMessage","touchedFields","hasGarage","isInvalid","field","submitButtonDisabled","Object","values","every","val","selectImage","data","emit","image","previewImage","isYearFormat","inputNumber","inputString","toString","yearRegex","test","inputYear","parseInt","currentYear","Date","getFullYear","setFieldTouched","formInvalid","streetName","houseNumber","zip","city","price","size","bedrooms","bathrooms","constructionYear","description","submitButtonClicked","getters","getByIdEditModel","components"],"sourceRoot":"","sources":["/Users/frostmoon/Documents/DTT projects/Vue js/house-listing-app/src/components/HouseListingFormComponent.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"\">\n    <div class=\"input-field-title\">Street name*</div>\n    <input\n      type=\"text\"\n      placeholder=\"Enter the street name\"\n      v-model=\"house.streetName\"\n      :class=\"{ error: isInvalid('streetName') }\"\n      @input=\"setFieldTouched('streetName')\"\n    />\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">House number*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter the house number\"\n          v-model=\"house.houseNumber\"\n          :class=\"{ error: isInvalid('houseNumber') }\"\n          @input=\"setFieldTouched('houseNumber')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Addition (optional)</div>\n        <input\n          type=\"number\"\n          placeholder=\"e.g. A\"\n          v-model=\"house.numberAddition\"\n        />\n      </div>\n    </div>\n    <div class=\"input-field-title\">Postal Code*</div>\n    <input\n      type=\"text\"\n      placeholder=\"e.g. 1000 AA\"\n      v-model=\"house.zip\"\n      :class=\"{ error: isInvalid('zip') }\"\n      @input=\"setFieldTouched('zip')\"\n    />\n    <div class=\"input-field-title\">City*</div>\n    <input\n      type=\"text\"\n      placeholder=\"e.g. Utrecht\"\n      v-model=\"house.city\"\n      :class=\"{ error: isInvalid('city') }\"\n      @input=\"setFieldTouched('city')\"\n    />\n    <div class=\"input-field-title\">Upload picture (PNG or JPG)*</div>\n    <UploadImageComponent\n      :houseImage=\"house.image\"\n      @selectImage=\"selectImage\"\n    />\n\n    <div class=\"input-field-title\">Price*</div>\n    <input\n      type=\"number\"\n      placeholder=\"e.g. €150.000\"\n      v-model=\"house.price\"\n      :class=\"{ error: isInvalid('price') }\"\n      @input=\"setFieldTouched('price')\"\n    />\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">Size*</div>\n        <input\n          type=\"number\"\n          placeholder=\"e.g. 60m²\"\n          v-model=\"house.size\"\n          :class=\"{ error: isInvalid('size') }\"\n          @input=\"setFieldTouched('size')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Garage*</div>\n        <select\n          v-model=\"hasGarage\"\n          :class=\"{ error: isInvalid('hasGarage') }\"\n          @click=\"setFieldTouched('hasGarage')\"\n        >\n          <option selected disabled :value=\"null\">\n            Please select an option\n          </option>\n          <option :value=\"true\">Yes</option>\n          <option :value=\"false\">No</option>\n        </select>\n      </div>\n    </div>\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">Bedrooms*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter amount\"\n          v-model=\"house.bedrooms\"\n          :class=\"{ error: isInvalid('bedrooms') }\"\n          @input=\"setFieldTouched('bedrooms')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Bathrooms*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter amount\"\n          v-model=\"house.bathrooms\"\n          :class=\"{ error: isInvalid('bathrooms') }\"\n          @input=\"setFieldTouched('bathrooms')\"\n        />\n      </div>\n    </div>\n    <div class=\"input-field-title\">Construction date*</div>\n    <input\n      type=\"number\"\n      placeholder=\"e.g. 1900\"\n      v-model=\"house.constructionYear\"\n      :class=\"{ error: isInvalid('constructionYear') }\"\n      @input=\"setFieldTouched('constructionYear')\"\n    />\n    <div class=\"input-field-title\">Description*</div>\n    <textarea\n      cols=\"30\"\n      rows=\"10\"\n      placeholder=\"Enter description\"\n      v-model=\"house.description\"\n      :class=\"{ error: isInvalid('description') }\"\n      @input=\"setFieldTouched('description')\"\n    />\n    <div class=\"error-label\">\n      {{ errorMessage }}\n    </div>\n    <div class=\"btn-container\">\n      <button\n        class=\"btn\"\n        @click=\"submitButtonClicked\"\n        :disabled=\"submitButtonDisabled\"\n      >\n        POST\n      </button>\n    </div>\n  </form>\n</template>\n\n<script>\nimport { reactive, toRefs, computed, onMounted, watchEffect } from \"vue\";\nimport { useStore } from \"vuex\";\nimport UploadImageComponent from \"./UploadImageComponent.vue\";\n\nexport default {\n  name: \"HouseListingForm\",\n  props: {\n    houseId: {\n      type: String,\n      required: false,\n    },\n  },\n  setup(props, context) {\n    const store = useStore();\n    const state = reactive({\n      house: {},\n      errorMessage: \"\",\n      touchedFields: {}, // object to track if each field has been touched or not\n    });\n\n    let hasGarage = null;\n\n    watchEffect(() => {\n      state.house.hasGarage = hasGarage;\n      hasGarage = state.house.hasGarage;\n    });\n\n    const isInvalid = computed(() => {\n      return (field) => {\n        // check if field is empty and has been touched by the user\n        return !state.house[field] && state.touchedFields[field];\n      };\n    });\n\n    // const submitButtonDisabled = computed(() => {\n    //   return (\n    //     !state.house.streetName ||\n    //     !state.house.houseNumber ||\n    //     !state.house.zip ||\n    //     !state.house.city ||\n    //     !state.house.price ||\n    //     !state.house.size ||\n    //     !state.house.bedrooms ||\n    //     !state.house.bathrooms ||\n    //     !state.house.constructionYear ||\n    //     !state.house.description ||\n    //     !isBool(state.house.hasGarage)\n    //   );\n    // });\n\n    const submitButtonDisabled = computed(() => {\n      const { house } = state;\n      return !Object.values(house).every((val) => val || val === false);\n    });\n\n    function selectImage(data) {\n      context.emit(\"selectImage\", {\n        image: data.image,\n        previewImage: data.previewImage,\n      });\n    }\n\n    function isYearFormat(inputNumber) {\n      // Convert inputNumber to a string\n      var inputString = inputNumber.toString();\n      // Check if inputString is a valid year format 'yyyy'\n      var yearRegex = /^\\d{4}$/;\n      if (!yearRegex.test(inputString)) {\n        return false;\n      }\n      // Check if input year is not before the current year\n      var inputYear = parseInt(inputString);\n      var currentYear = new Date().getFullYear();\n      if (!(inputYear < currentYear)) {\n        return false;\n      }\n      return true;\n    }\n\n    // function isBool(bool) {\n    //   if (typeof bool === \"boolean\") return true;\n    //   return false;\n    // }\n    // method to set the touched status of a field to true\n\n    function setFieldTouched(field) {\n      state.touchedFields = {\n        ...state.touchedFields,\n        [field]: true,\n      };\n    }\n\n    function formInvalid() {\n      // Check if any required fields are empty\n      if (\n        !state.house.streetName ||\n        !state.house.houseNumber ||\n        !state.house.zip ||\n        !state.house.city ||\n        !state.house.price ||\n        !state.house.size ||\n        !state.house.bedrooms ||\n        !state.house.bathrooms ||\n        !state.house.constructionYear ||\n        !state.house.description ||\n        !(typeof state.house.hasGarage === \"boolean\")\n      ) {\n        state.errorMessage = \"Please fill out all required fields.\";\n        return true;\n      }\n\n      if (!isYearFormat(state.house.constructionYear)) {\n        state.errorMessage = \"Please enter valid construction year.\";\n        return true;\n      }\n\n      return false;\n    }\n\n    function submitButtonClicked() {\n      if (!formInvalid()) context.emit(\"submitForm\", state.house);\n    }\n\n    onMounted(async () => {\n      if (props && props.houseId) {\n        const house = store.getters.getByIdEditModel(props.houseId);\n        state.house = house;\n        hasGarage = true;\n      }\n    });\n\n    return {\n      ...toRefs(state),\n      hasGarage,\n      submitButtonDisabled,\n\n      isInvalid,\n      setFieldTouched,\n      selectImage,\n      submitButtonClicked,\n    };\n  },\n  components: { UploadImageComponent },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.flex {\n  display: flex;\n}\n.input-field-title {\n  margin: 10px 0;\n}\n.spacer {\n  width: 20px;\n}\n.btn-container {\n  margin: 50px 275px;\n}\n.error {\n  border: 1px solid #f00 !important;\n\n  &::placeholder {\n    color: red;\n    opacity: 1; /* Firefox */\n  }\n\n  &:-ms-input-placeholder {\n    /* Internet Explorer 10-11 */\n    color: red;\n  }\n\n  &::-ms-input-placeholder {\n    /* Microsoft Edge */\n    color: red;\n  }\n}\n.error-label {\n  color: red;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}