{"ast":null,"code":"import { reactive, toRefs, computed, onMounted, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport UploadImageComponent from \"./UploadImageComponent.vue\";\nexport default {\n  name: \"HouseListingForm\",\n  props: {\n    houseId: {\n      type: String,\n      required: false\n    }\n  },\n  setup(props, context) {\n    const store = useStore();\n    const state = reactive({\n      house: {\n        hasGarage: null\n      },\n      errorMessage: \"\",\n      touchedFields: {} // object to track if each field has been touched or not\n    });\n\n    const isInvalid = computed(() => {\n      return field => {\n        let isInvalid = false;\n        // check if field is empty and has been touched by the user\n        if (field == \"hasGarage\") isInvalid = !(typeof state.house[field] === \"boolean\") && state.touchedFields[field];\n        if (field == \"constructionYear\") isInvalid = !state.house[field] && !isYearFormat(state.house.constructionYear) && state.touchedFields[field];else isInvalid = !state.house[field] && state.touchedFields[field];\n        if (isInvalid) state.errorMessage = \"Please fill out all required fields.\";\n        return isInvalid;\n      };\n    });\n    const submitButtonDisabled = computed(() => {\n      const requiredFields = [\"streetName\", \"houseNumber\", \"zip\", \"city\", \"price\", \"size\", \"bedrooms\", \"bathrooms\", \"constructionYear\", \"description\", \"hasGarage\"];\n      const isMissingField = requiredFields.some(field => {\n        const value = state.house[field];\n        return value === undefined || value === null || value === \"\";\n      });\n      return isMissingField;\n    });\n    watch(submitButtonDisabled, newValue => {\n      if (!newValue) {\n        state.errorMessage = \"\";\n      }\n    });\n    function selectImage(data) {\n      context.emit(\"selectImage\", {\n        image: data.image,\n        previewImage: data.previewImage\n      });\n    }\n    function isYearFormat(inputNumber) {\n      if (!inputNumber) return false;\n      // Convert inputNumber to a string\n      var inputString = inputNumber.toString();\n      // Check if inputString is a valid year format 'yyyy'\n      var yearRegex = /^\\d{4}$/;\n      if (!yearRegex.test(inputString)) return false;\n      // Check if input year is not before the current year\n      var inputYear = parseInt(inputString);\n      var currentYear = new Date().getFullYear();\n      if (!(inputYear < currentYear)) return false;\n      return true;\n    }\n\n    // method to set the touched status of a field to true\n    function setFieldTouched(field) {\n      state.touchedFields = {\n        ...state.touchedFields,\n        [field]: true\n      };\n    }\n    function submitButtonClicked() {\n      context.emit(\"submitForm\", state.house);\n    }\n    onMounted(async () => {\n      if (props && props.houseId) {\n        state.house = store.getters.getByIdEditModel(props.houseId);\n      }\n    });\n    return {\n      ...toRefs(state),\n      submitButtonDisabled,\n      isInvalid,\n      setFieldTouched,\n      selectImage,\n      submitButtonClicked\n    };\n  },\n  components: {\n    UploadImageComponent\n  },\n  emits: [\"selectImage\", \"submitForm\"]\n};","map":{"version":3,"mappings":"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","names":["reactive","toRefs","computed","onMounted","watch","useStore","UploadImageComponent","name","props","houseId","type","String","required","setup","context","store","state","house","hasGarage","errorMessage","touchedFields","isInvalid","field","isYearFormat","constructionYear","submitButtonDisabled","requiredFields","isMissingField","some","value","undefined","newValue","selectImage","data","emit","image","previewImage","inputNumber","inputString","toString","yearRegex","test","inputYear","parseInt","currentYear","Date","getFullYear","setFieldTouched","submitButtonClicked","getters","getByIdEditModel","components","emits"],"sourceRoot":"","sources":["/Users/frostmoon/Documents/DTT projects/Vue js/house-listing-app/src/components/HouseListingFormComponent.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"\">\n    <div class=\"input-field-title\">Street name*</div>\n    <input\n      type=\"text\"\n      placeholder=\"Enter the street name\"\n      v-model=\"house.streetName\"\n      :class=\"{ error: isInvalid('streetName') }\"\n      @input=\"setFieldTouched('streetName')\"\n    />\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">House number*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter the house number\"\n          v-model=\"house.houseNumber\"\n          :class=\"{ error: isInvalid('houseNumber') }\"\n          @input=\"setFieldTouched('houseNumber')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Addition (optional)</div>\n        <input\n          type=\"number\"\n          placeholder=\"e.g. A\"\n          v-model=\"house.numberAddition\"\n        />\n      </div>\n    </div>\n    <div class=\"input-field-title\">Postal Code*</div>\n    <input\n      type=\"text\"\n      placeholder=\"e.g. 1000 AA\"\n      v-model=\"house.zip\"\n      :class=\"{ error: isInvalid('zip') }\"\n      @input=\"setFieldTouched('zip')\"\n    />\n    <div class=\"input-field-title\">City*</div>\n    <input\n      type=\"text\"\n      placeholder=\"e.g. Utrecht\"\n      v-model=\"house.city\"\n      :class=\"{ error: isInvalid('city') }\"\n      @input=\"setFieldTouched('city')\"\n    />\n    <div class=\"input-field-title\">Upload picture (PNG or JPG)*</div>\n    <UploadImageComponent\n      :houseImage=\"house.image\"\n      @selectImage=\"selectImage\"\n    />\n\n    <div class=\"input-field-title\">Price*</div>\n    <input\n      type=\"number\"\n      placeholder=\"e.g. €150.000\"\n      v-model=\"house.price\"\n      :class=\"{ error: isInvalid('price') }\"\n      @input=\"setFieldTouched('price')\"\n    />\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">Size*</div>\n        <input\n          type=\"number\"\n          placeholder=\"e.g. 60m²\"\n          v-model=\"house.size\"\n          :class=\"{ error: isInvalid('size') }\"\n          @input=\"setFieldTouched('size')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Garage*</div>\n        <select\n          v-model=\"house.hasGarage\"\n          :class=\"{ error: isInvalid('hasGarage') }\"\n          @click=\"setFieldTouched('hasGarage')\"\n        >\n          <option selected disabled :value=\"null\">\n            Please select an option\n          </option>\n          <option :value=\"true\">Yes</option>\n          <option :value=\"false\">No</option>\n        </select>\n      </div>\n    </div>\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">Bedrooms*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter amount\"\n          v-model=\"house.bedrooms\"\n          :class=\"{ error: isInvalid('bedrooms') }\"\n          @input=\"setFieldTouched('bedrooms')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Bathrooms*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter amount\"\n          v-model=\"house.bathrooms\"\n          :class=\"{ error: isInvalid('bathrooms') }\"\n          @input=\"setFieldTouched('bathrooms')\"\n        />\n      </div>\n    </div>\n    <div class=\"input-field-title\">Construction date*</div>\n    <input\n      type=\"number\"\n      placeholder=\"e.g. 1900\"\n      v-model=\"house.constructionYear\"\n      :class=\"{ error: isInvalid('constructionYear') }\"\n      @input=\"setFieldTouched('constructionYear')\"\n    />\n    <div class=\"input-field-title\">Description*</div>\n    <textarea\n      cols=\"30\"\n      rows=\"10\"\n      placeholder=\"Enter description\"\n      v-model=\"house.description\"\n      :class=\"{ error: isInvalid('description') }\"\n      @input=\"setFieldTouched('description')\"\n    />\n    <div class=\"error-label\">\n      {{ errorMessage }}\n    </div>\n    <div class=\"btn-container\">\n      <button\n        class=\"btn\"\n        @click=\"submitButtonClicked\"\n        :disabled=\"submitButtonDisabled\"\n      >\n        POST\n      </button>\n    </div>\n  </form>\n</template>\n\n<script>\nimport { reactive, toRefs, computed, onMounted, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport UploadImageComponent from \"./UploadImageComponent.vue\";\n\nexport default {\n  name: \"HouseListingForm\",\n  props: {\n    houseId: {\n      type: String,\n      required: false,\n    },\n  },\n  setup(props, context) {\n    const store = useStore();\n    const state = reactive({\n      house: {\n        hasGarage: null,\n      },\n      errorMessage: \"\",\n      touchedFields: {}, // object to track if each field has been touched or not\n    });\n\n    const isInvalid = computed(() => {\n      return (field) => {\n        let isInvalid = false;\n        // check if field is empty and has been touched by the user\n        if (field == \"hasGarage\")\n          isInvalid =\n            !(typeof state.house[field] === \"boolean\") &&\n            state.touchedFields[field];\n        if (field == \"constructionYear\")\n          isInvalid =\n            !state.house[field] &&\n            !isYearFormat(state.house.constructionYear) &&\n            state.touchedFields[field];\n        else isInvalid = !state.house[field] && state.touchedFields[field];\n        if (isInvalid)\n          state.errorMessage = \"Please fill out all required fields.\";\n        return isInvalid;\n      };\n    });\n\n    const submitButtonDisabled = computed(() => {\n      const requiredFields = [\n        \"streetName\",\n        \"houseNumber\",\n        \"zip\",\n        \"city\",\n        \"price\",\n        \"size\",\n        \"bedrooms\",\n        \"bathrooms\",\n        \"constructionYear\",\n        \"description\",\n        \"hasGarage\",\n      ];\n      const isMissingField = requiredFields.some((field) => {\n        const value = state.house[field];\n        return value === undefined || value === null || value === \"\";\n      });\n      return isMissingField;\n    });\n\n    watch(submitButtonDisabled, (newValue) => {\n      if (!newValue) {\n        state.errorMessage = \"\";\n      }\n    });\n\n    function selectImage(data) {\n      context.emit(\"selectImage\", {\n        image: data.image,\n        previewImage: data.previewImage,\n      });\n    }\n\n    function isYearFormat(inputNumber) {\n      if (!inputNumber) return false;\n      // Convert inputNumber to a string\n      var inputString = inputNumber.toString();\n      // Check if inputString is a valid year format 'yyyy'\n      var yearRegex = /^\\d{4}$/;\n      if (!yearRegex.test(inputString)) return false;\n      // Check if input year is not before the current year\n      var inputYear = parseInt(inputString);\n      var currentYear = new Date().getFullYear();\n      if (!(inputYear < currentYear)) return false;\n\n      return true;\n    }\n\n    // method to set the touched status of a field to true\n    function setFieldTouched(field) {\n      state.touchedFields = {\n        ...state.touchedFields,\n        [field]: true,\n      };\n    }\n\n    function submitButtonClicked() {\n      context.emit(\"submitForm\", state.house);\n    }\n\n    onMounted(async () => {\n      if (props && props.houseId) {\n        state.house = store.getters.getByIdEditModel(props.houseId);\n      }\n    });\n\n    return {\n      ...toRefs(state),\n      submitButtonDisabled,\n\n      isInvalid,\n      setFieldTouched,\n      selectImage,\n      submitButtonClicked,\n    };\n  },\n  components: { UploadImageComponent },\n  emits: [\"selectImage\", \"submitForm\"],\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.flex {\n  display: flex;\n}\n.input-field-title {\n  margin: 10px 0;\n}\n.spacer {\n  width: 20px;\n}\n.btn-container {\n  margin: 50px 275px;\n}\n.error {\n  border: 1px solid #f00 !important;\n\n  &::placeholder {\n    color: red;\n    opacity: 1; /* Firefox */\n  }\n\n  &:-ms-input-placeholder {\n    /* Internet Explorer 10-11 */\n    color: red;\n  }\n\n  &::-ms-input-placeholder {\n    /* Microsoft Edge */\n    color: red;\n  }\n}\n.error-label {\n  color: red;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}