{"ast":null,"code":"import { reactive, toRefs, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\nimport UploadImageComponent from \"./UploadImageComponent.vue\";\nexport default {\n  name: \"HouseListingForm\",\n  props: {\n    houseId: {\n      type: String,\n      required: false\n    }\n  },\n  setup(props, context) {\n    const store = useStore();\n    const state = reactive({\n      house: {\n        hasGarage: null,\n        numberAddition: null\n      },\n      errorMessage: \"\",\n      touchedFields: {} // object to track if each field has been touched or not\n    });\n\n    const isInvalid = computed(() => field => {\n      const {\n        touchedFields\n      } = state;\n      if (touchedFields[field]) return validateField(field, true);else return false;\n    });\n    function validateField(field, error) {\n      const {\n        house\n      } = state;\n      let isInvalid = false;\n      switch (field) {\n        case (\"numberAddition\", \"image\"):\n          console.log(\"field\");\n          console.log(field);\n          console.log(house[field]);\n          console.log(\"field\");\n          break;\n        case \"image\":\n          break;\n        case \"hasGarage\":\n          isInvalid = !(typeof house[field] === \"boolean\");\n          if (isInvalid && error) state.errorMessage = \"Please pick a garage option.\";\n          break;\n        case \"constructionYear\":\n          isInvalid = !isYearFormat(house[field]);\n          if (isInvalid && error) state.errorMessage = \"Please pick a valid construction year.\";\n          break;\n        default:\n          isInvalid = !house[field];\n          if (isInvalid) console.log(field);\n          if (isInvalid && error) state.errorMessage = \"Please fill out all required fields.\";\n          break;\n      }\n      return isInvalid;\n    }\n    const submitButtonDisabled = computed(() => {\n      let isInvalid = false;\n      const {\n        house\n      } = state;\n      Object.keys(house).map(key => {\n        if (validateField(key)) {\n          isInvalid = true;\n          return;\n        }\n      });\n      console.log(\"isInvalid\");\n      console.log(isInvalid);\n      console.log(\"isInvalid\");\n      return isInvalid;\n    });\n    function selectImage(data) {\n      context.emit(\"selectImage\", {\n        image: data.image,\n        previewImage: data.previewImage\n      });\n    }\n    function isYearFormat(inputNumber) {\n      if (!inputNumber) return false;\n      // Convert inputNumber to a string\n      var inputString = inputNumber.toString();\n      // Check if inputString is a valid year format 'yyyy'\n      var yearRegex = /^\\d{4}$/;\n      if (!yearRegex.test(inputString)) return false;\n      // Check if input year is not before the current year\n      var inputYear = parseInt(inputString);\n      var currentYear = new Date().getFullYear();\n      if (!(inputYear < currentYear)) return false;\n      return true;\n    }\n\n    // method to set the touched status of a field to true\n    function setFieldTouched(field) {\n      state.touchedFields = {\n        ...state.touchedFields,\n        [field]: true\n      };\n    }\n    function submitButtonClicked() {\n      context.emit(\"submitForm\", state.house);\n    }\n    onMounted(async () => {\n      if (props && props.houseId) {\n        state.house = store.getters.getByIdEditModel(props.houseId);\n      }\n    });\n    return {\n      ...toRefs(state),\n      submitButtonDisabled,\n      isInvalid,\n      setFieldTouched,\n      selectImage,\n      submitButtonClicked\n    };\n  },\n  components: {\n    UploadImageComponent\n  },\n  emits: [\"selectImage\", \"submitForm\"]\n};","map":{"version":3,"mappings":"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","names":["reactive","toRefs","computed","onMounted","useStore","UploadImageComponent","name","props","houseId","type","String","required","setup","context","store","state","house","hasGarage","numberAddition","errorMessage","touchedFields","isInvalid","field","validateField","error","console","log","isYearFormat","submitButtonDisabled","Object","keys","map","key","selectImage","data","emit","image","previewImage","inputNumber","inputString","toString","yearRegex","test","inputYear","parseInt","currentYear","Date","getFullYear","setFieldTouched","submitButtonClicked","getters","getByIdEditModel","components","emits"],"sourceRoot":"","sources":["/Users/frostmoon/Documents/DTT projects/Vue js/house-listing-app/src/components/HouseListingFormComponent.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"\">\n    <div class=\"input-field-title\">Street name*</div>\n    <input\n      type=\"text\"\n      placeholder=\"Enter the street name\"\n      v-model=\"house.streetName\"\n      :class=\"{ error: isInvalid('streetName') }\"\n      @input=\"setFieldTouched('streetName')\"\n    />\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">House number*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter the house number\"\n          v-model=\"house.houseNumber\"\n          :class=\"{ error: isInvalid('houseNumber') }\"\n          @input=\"setFieldTouched('houseNumber')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Addition (optional)</div>\n        <input\n          type=\"number\"\n          placeholder=\"e.g. A\"\n          v-model=\"house.numberAddition\"\n        />\n      </div>\n    </div>\n    <div class=\"input-field-title\">Postal Code*</div>\n    <input\n      type=\"text\"\n      placeholder=\"e.g. 1000 AA\"\n      v-model=\"house.zip\"\n      :class=\"{ error: isInvalid('zip') }\"\n      @input=\"setFieldTouched('zip')\"\n    />\n    <div class=\"input-field-title\">City*</div>\n    <input\n      type=\"text\"\n      placeholder=\"e.g. Utrecht\"\n      v-model=\"house.city\"\n      :class=\"{ error: isInvalid('city') }\"\n      @input=\"setFieldTouched('city')\"\n    />\n    <div class=\"input-field-title\">Upload picture (PNG or JPG)*</div>\n    <UploadImageComponent\n      :houseImage=\"house.image\"\n      @selectImage=\"selectImage\"\n    />\n\n    <div class=\"input-field-title\">Price*</div>\n    <input\n      type=\"number\"\n      placeholder=\"e.g. €150.000\"\n      v-model=\"house.price\"\n      :class=\"{ error: isInvalid('price') }\"\n      @input=\"setFieldTouched('price')\"\n    />\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">Size*</div>\n        <input\n          type=\"number\"\n          placeholder=\"e.g. 60m²\"\n          v-model=\"house.size\"\n          :class=\"{ error: isInvalid('size') }\"\n          @input=\"setFieldTouched('size')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Garage*</div>\n        <select\n          v-model=\"house.hasGarage\"\n          :class=\"{ error: isInvalid('hasGarage') }\"\n          @click=\"setFieldTouched('hasGarage')\"\n        >\n          <option selected disabled :value=\"null\">\n            Please select an option\n          </option>\n          <option :value=\"true\">Yes</option>\n          <option :value=\"false\">No</option>\n        </select>\n      </div>\n    </div>\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">Bedrooms*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter amount\"\n          v-model=\"house.bedrooms\"\n          :class=\"{ error: isInvalid('bedrooms') }\"\n          @input=\"setFieldTouched('bedrooms')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Bathrooms*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter amount\"\n          v-model=\"house.bathrooms\"\n          :class=\"{ error: isInvalid('bathrooms') }\"\n          @input=\"setFieldTouched('bathrooms')\"\n        />\n      </div>\n    </div>\n    <div class=\"input-field-title\">Construction date*</div>\n    <input\n      type=\"number\"\n      placeholder=\"e.g. 1900\"\n      v-model=\"house.constructionYear\"\n      :class=\"{ error: isInvalid('constructionYear') }\"\n      @input=\"setFieldTouched('constructionYear')\"\n    />\n    <div class=\"input-field-title\">Description*</div>\n    <textarea\n      cols=\"30\"\n      rows=\"10\"\n      placeholder=\"Enter description\"\n      v-model=\"house.description\"\n      :class=\"{ error: isInvalid('description') }\"\n      @input=\"setFieldTouched('description')\"\n    />\n    <div class=\"error-label\">\n      {{ errorMessage }}\n    </div>\n    <div class=\"btn-container\">\n      <button\n        class=\"btn\"\n        @click=\"submitButtonClicked\"\n        :disabled=\"submitButtonDisabled\"\n      >\n        POST\n      </button>\n    </div>\n  </form>\n</template>\n\n<script>\nimport { reactive, toRefs, computed, onMounted } from \"vue\";\nimport { useStore } from \"vuex\";\nimport UploadImageComponent from \"./UploadImageComponent.vue\";\n\nexport default {\n  name: \"HouseListingForm\",\n  props: {\n    houseId: {\n      type: String,\n      required: false,\n    },\n  },\n  setup(props, context) {\n    const store = useStore();\n    const state = reactive({\n      house: {\n        hasGarage: null,\n        numberAddition: null,\n      },\n      errorMessage: \"\",\n      touchedFields: {}, // object to track if each field has been touched or not\n    });\n\n    const isInvalid = computed(() => (field) => {\n      const { touchedFields } = state;\n      if (touchedFields[field]) return validateField(field, true);\n      else return false;\n    });\n\n    function validateField(field, error) {\n      const { house } = state;\n      let isInvalid = false;\n\n      switch (field) {\n        case \"numberAddition\", \"image\":\n          console.log(\"field\");\n          console.log(field);\n          console.log(house[field]);\n          console.log(\"field\");\n          break;\n        case \"image\":\n          break;\n        case \"hasGarage\":\n          isInvalid = !(typeof house[field] === \"boolean\");\n          if (isInvalid && error)\n            state.errorMessage = \"Please pick a garage option.\";\n          break;\n\n        case \"constructionYear\":\n          isInvalid = !isYearFormat(house[field]);\n          if (isInvalid && error)\n            state.errorMessage = \"Please pick a valid construction year.\";\n          break;\n\n        default:\n          isInvalid = !house[field];\n          if (isInvalid) console.log(field);\n          if (isInvalid && error)\n            state.errorMessage = \"Please fill out all required fields.\";\n          break;\n      }\n      return isInvalid;\n    }\n\n    const submitButtonDisabled = computed(() => {\n      let isInvalid = false;\n      const { house } = state;\n      Object.keys(house).map((key) => {\n        if (validateField(key)) {\n          isInvalid = true;\n          return;\n        }\n      });\n      console.log(\"isInvalid\");\n      console.log(isInvalid);\n      console.log(\"isInvalid\");\n\n      return isInvalid;\n    });\n\n    function selectImage(data) {\n      context.emit(\"selectImage\", {\n        image: data.image,\n        previewImage: data.previewImage,\n      });\n    }\n\n    function isYearFormat(inputNumber) {\n      if (!inputNumber) return false;\n      // Convert inputNumber to a string\n      var inputString = inputNumber.toString();\n      // Check if inputString is a valid year format 'yyyy'\n      var yearRegex = /^\\d{4}$/;\n      if (!yearRegex.test(inputString)) return false;\n      // Check if input year is not before the current year\n      var inputYear = parseInt(inputString);\n      var currentYear = new Date().getFullYear();\n      if (!(inputYear < currentYear)) return false;\n\n      return true;\n    }\n\n    // method to set the touched status of a field to true\n    function setFieldTouched(field) {\n      state.touchedFields = {\n        ...state.touchedFields,\n        [field]: true,\n      };\n    }\n\n    function submitButtonClicked() {\n      context.emit(\"submitForm\", state.house);\n    }\n\n    onMounted(async () => {\n      if (props && props.houseId) {\n        state.house = store.getters.getByIdEditModel(props.houseId);\n      }\n    });\n\n    return {\n      ...toRefs(state),\n      submitButtonDisabled,\n\n      isInvalid,\n      setFieldTouched,\n      selectImage,\n      submitButtonClicked,\n    };\n  },\n  components: { UploadImageComponent },\n  emits: [\"selectImage\", \"submitForm\"],\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.flex {\n  display: flex;\n}\n.input-field-title {\n  margin: 10px 0;\n}\n.spacer {\n  width: 20px;\n}\n.btn-container {\n  margin: 50px 275px;\n}\n.error {\n  border: 1px solid #f00 !important;\n\n  &::placeholder {\n    color: red;\n    opacity: 1; /* Firefox */\n  }\n\n  &:-ms-input-placeholder {\n    /* Internet Explorer 10-11 */\n    color: red;\n  }\n\n  &::-ms-input-placeholder {\n    /* Microsoft Edge */\n    color: red;\n  }\n}\n.error-label {\n  color: red;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}