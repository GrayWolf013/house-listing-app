{"ast":null,"code":"import { reactive, toRefs, computed, onMounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport UploadImageComponent from \"./UploadImageComponent.vue\";\nexport default {\n  name: \"HouseListingForm\",\n  props: {\n    houseId: {\n      type: String,\n      required: false\n    }\n  },\n  setup(props, context) {\n    const store = useStore();\n    const state = reactive({\n      house: {\n        hasGarage: null\n      },\n      submitButtonDisabled: true\n      // errorMessage: \"\",\n      // touchedFields: {}, // object to track if each field has been touched or not\n    });\n\n    const touchedFields = ref(new Set());\n    const errorMessage = computed(() => {\n      if (touchedFields.value.has(\"streetName\") && !house.value.streetName.trim()) {\n        return \"Please enter a valid street name\";\n      } else if (touchedFields.value.has(\"houseNumber\") && (!house.value.houseNumber || house.value.houseNumber <= 0)) {\n        return \"Please enter a valid house number\";\n      } else if (touchedFields.value.has(\"zip\") && !/^\\d{4}\\s?[a-zA-Z]{2}$/i.test(house.value.zip.trim())) {\n        return \"Please enter a valid postal code\";\n      } else if (touchedFields.value.has(\"city\") && !house.value.city.trim()) {\n        return \"Please enter a valid city name\";\n      } else if (touchedFields.value.has(\"image\") && !house.value.image.trim()) {\n        return \"Please upload a house image\";\n      } else if (touchedFields.value.has(\"price\") && (!house.value.price || house.value.price <= 0)) {\n        return \"Please enter a valid house price\";\n      } else if (touchedFields.value.has(\"size\") && (!house.value.size || house.value.size <= 0)) {\n        return \"Please enter a valid house size\";\n      } else if (touchedFields.value.has(\"hasGarage\") && house.value.hasGarage === null) {\n        return \"Please select an option for garage\";\n      } else if (touchedFields.value.has(\"bedrooms\") && (!house.value.bedrooms || house.value.bedrooms <= 0)) {\n        return \"Please enter a valid number of bedrooms\";\n      } else if (touchedFields.value.has(\"bathrooms\") && (!house.value.bathrooms || house.value.bathrooms <= 0)) {\n        return \"Please enter a valid number of bathrooms\";\n      } else if (touchedFields.value.has(\"constructionYear\") && (!house.value.constructionYear || house.value.constructionYear <= 0 || house.value.constructionYear > new Date().getFullYear())) {\n        return \"Please enter a valid construction year\";\n      } else if (touchedFields.value.has(\"description\") && !house.value.description.trim()) {\n        return \"Please enter a valid house description\";\n      } else return \"\";\n    });\n    // const isInvalid = computed(() => {\n    //   return (field) => {\n    //     let isInvalid = false;\n    //     // check if field is empty and has been touched by the user\n    //     if (field == \"hasGarage\") {\n    //       isInvalid =\n    //         !(typeof state.house[field] === \"boolean\") &&\n    //         state.touchedFields[field];\n    //       if (isInvalid) state.errorMessage = \"Please pick a garage option.\";\n    //       return isInvalid;\n    //     }\n\n    //     if (field == \"constructionYear\") {\n    //       isInvalid =\n    //         !isYearFormat(state.house.constructionYear) &&\n    //         state.touchedFields[field];\n    //       if (isInvalid)\n    //         state.errorMessage = \"Please pick a valid construction year.\";\n    //       return isInvalid;\n    //     } else isInvalid = !state.house[field] && state.touchedFields[field];\n    //     if (isInvalid)\n    //       state.errorMessage = \"Please fill out all required fields.\";\n    //     return isInvalid;\n    //   };\n    // });\n\n    const submitButtonDisabled = computed(() => {\n      const requiredFields = [\"streetName\", \"houseNumber\", \"zip\", \"city\", \"price\", \"size\", \"bedrooms\", \"bathrooms\", \"constructionYear\", \"description\", \"hasGarage\"];\n      const isMissingField = requiredFields.some(field => {\n        const value = state.house[field];\n        return value === undefined || value === null || value === \"\";\n      });\n      return isMissingField;\n    });\n\n    // watch(submitButtonDisabled, (newValue) => {\n    //   if (!newValue) {\n    //     state.errorMessage = \"\";\n    //   }\n    // });\n\n    function selectImage(data) {\n      context.emit(\"selectImage\", {\n        image: data.image,\n        previewImage: data.previewImage\n      });\n    }\n    function isYearFormat(inputNumber) {\n      if (!inputNumber) return false;\n      // Convert inputNumber to a string\n      var inputString = inputNumber.toString();\n      // Check if inputString is a valid year format 'yyyy'\n      var yearRegex = /^\\d{4}$/;\n      if (!yearRegex.test(inputString)) return false;\n      // Check if input year is not before the current year\n      var inputYear = parseInt(inputString);\n      var currentYear = new Date().getFullYear();\n      if (!(inputYear < currentYear)) return false;\n      return true;\n    }\n\n    // method to set the touched status of a field to true\n    function setFieldTouched(field) {\n      state.touchedFields = {\n        ...state.touchedFields,\n        [field]: true\n      };\n    }\n    function submitButtonClicked() {\n      context.emit(\"submitForm\", state.house);\n    }\n    onMounted(async () => {\n      if (props && props.houseId) {\n        state.house = store.getters.getByIdEditModel(props.houseId);\n      }\n    });\n    return {\n      ...toRefs(state),\n      submitButtonDisabled,\n      isInvalid,\n      setFieldTouched,\n      selectImage,\n      submitButtonClicked\n    };\n  },\n  components: {\n    UploadImageComponent\n  },\n  emits: [\"selectImage\", \"submitForm\"]\n};","map":{"version":3,"mappings":"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","names":["reactive","toRefs","computed","onMounted","ref","useStore","UploadImageComponent","name","props","houseId","type","String","required","setup","context","store","state","house","hasGarage","submitButtonDisabled","touchedFields","Set","errorMessage","value","has","streetName","trim","houseNumber","test","zip","city","image","price","size","bedrooms","bathrooms","constructionYear","Date","getFullYear","description","requiredFields","isMissingField","some","field","undefined","selectImage","data","emit","previewImage","isYearFormat","inputNumber","inputString","toString","yearRegex","inputYear","parseInt","currentYear","setFieldTouched","submitButtonClicked","getters","getByIdEditModel","isInvalid","components","emits"],"sourceRoot":"","sources":["/Users/frostmoon/Documents/DTT projects/Vue js/house-listing-app/src/components/HouseListingFormComponent.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"\">\n    <div class=\"input-field-title\">Street name*</div>\n    <input\n      type=\"text\"\n      placeholder=\"Enter the street name\"\n      v-model=\"house.streetName\"\n      :class=\"{ error: isInvalid('streetName') }\"\n      @input=\"setFieldTouched('streetName')\"\n    />\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">House number*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter the house number\"\n          v-model=\"house.houseNumber\"\n          :class=\"{ error: isInvalid('houseNumber') }\"\n          @input=\"setFieldTouched('houseNumber')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Addition (optional)</div>\n        <input\n          type=\"number\"\n          placeholder=\"e.g. A\"\n          v-model=\"house.numberAddition\"\n        />\n      </div>\n    </div>\n    <div class=\"input-field-title\">Postal Code*</div>\n    <input\n      type=\"text\"\n      placeholder=\"e.g. 1000 AA\"\n      v-model=\"house.zip\"\n      :class=\"{ error: isInvalid('zip') }\"\n      @input=\"setFieldTouched('zip')\"\n    />\n    <div class=\"input-field-title\">City*</div>\n    <input\n      type=\"text\"\n      placeholder=\"e.g. Utrecht\"\n      v-model=\"house.city\"\n      :class=\"{ error: isInvalid('city') }\"\n      @input=\"setFieldTouched('city')\"\n    />\n    <div class=\"input-field-title\">Upload picture (PNG or JPG)*</div>\n    <UploadImageComponent\n      :houseImage=\"house.image\"\n      @selectImage=\"selectImage\"\n    />\n\n    <div class=\"input-field-title\">Price*</div>\n    <input\n      type=\"number\"\n      placeholder=\"e.g. €150.000\"\n      v-model=\"house.price\"\n      :class=\"{ error: isInvalid('price') }\"\n      @input=\"setFieldTouched('price')\"\n    />\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">Size*</div>\n        <input\n          type=\"number\"\n          placeholder=\"e.g. 60m²\"\n          v-model=\"house.size\"\n          :class=\"{ error: isInvalid('size') }\"\n          @input=\"setFieldTouched('size')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Garage*</div>\n        <select\n          v-model=\"house.hasGarage\"\n          :class=\"{ error: isInvalid('hasGarage') }\"\n          @click=\"setFieldTouched('hasGarage')\"\n        >\n          <option selected disabled :value=\"null\">\n            Please select an option\n          </option>\n          <option :value=\"true\">Yes</option>\n          <option :value=\"false\">No</option>\n        </select>\n      </div>\n    </div>\n    <div class=\"flex\">\n      <div>\n        <div class=\"input-field-title\">Bedrooms*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter amount\"\n          v-model=\"house.bedrooms\"\n          :class=\"{ error: isInvalid('bedrooms') }\"\n          @input=\"setFieldTouched('bedrooms')\"\n        />\n      </div>\n      <div class=\"spacer\" />\n      <div>\n        <div class=\"input-field-title\">Bathrooms*</div>\n        <input\n          type=\"number\"\n          placeholder=\"Enter amount\"\n          v-model=\"house.bathrooms\"\n          :class=\"{ error: isInvalid('bathrooms') }\"\n          @input=\"setFieldTouched('bathrooms')\"\n        />\n      </div>\n    </div>\n    <div class=\"input-field-title\">Construction date*</div>\n    <input\n      type=\"number\"\n      placeholder=\"e.g. 1900\"\n      v-model=\"house.constructionYear\"\n      :class=\"{ error: isInvalid('constructionYear') }\"\n      @input=\"setFieldTouched('constructionYear')\"\n    />\n    <div class=\"input-field-title\">Description*</div>\n    <textarea\n      cols=\"30\"\n      rows=\"10\"\n      placeholder=\"Enter description\"\n      v-model=\"house.description\"\n      :class=\"{ error: isInvalid('description') }\"\n      @input=\"setFieldTouched('description')\"\n    />\n    <div class=\"error-label\">\n      {{ errorMessage }}\n    </div>\n    <div class=\"btn-container\">\n      <button\n        class=\"btn\"\n        @click=\"submitButtonClicked\"\n        :disabled=\"submitButtonDisabled\"\n      >\n        POST\n      </button>\n    </div>\n  </form>\n</template>\n\n<script>\nimport { reactive, toRefs, computed, onMounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport UploadImageComponent from \"./UploadImageComponent.vue\";\n\nexport default {\n  name: \"HouseListingForm\",\n  props: {\n    houseId: {\n      type: String,\n      required: false,\n    },\n  },\n  setup(props, context) {\n    const store = useStore();\n    const state = reactive({\n      house: {\n        hasGarage: null,\n      },\n      submitButtonDisabled: true\n      // errorMessage: \"\",\n      // touchedFields: {}, // object to track if each field has been touched or not\n    });\n\n    const touchedFields = ref(new Set());\n    const errorMessage = computed(() => {\n      if (\n        touchedFields.value.has(\"streetName\") &&\n        !house.value.streetName.trim()\n      ) {\n        return \"Please enter a valid street name\";\n      } else if (\n        touchedFields.value.has(\"houseNumber\") &&\n        (!house.value.houseNumber || house.value.houseNumber <= 0)\n      ) {\n        return \"Please enter a valid house number\";\n      } else if (\n        touchedFields.value.has(\"zip\") &&\n        !/^\\d{4}\\s?[a-zA-Z]{2}$/i.test(house.value.zip.trim())\n      ) {\n        return \"Please enter a valid postal code\";\n      } else if (\n        touchedFields.value.has(\"city\") &&\n        !house.value.city.trim()\n      ) {\n        return \"Please enter a valid city name\";\n      } else if (\n        touchedFields.value.has(\"image\") &&\n        !house.value.image.trim()\n      ) {\n        return \"Please upload a house image\";\n      } else if (\n        touchedFields.value.has(\"price\") &&\n        (!house.value.price || house.value.price <= 0)\n      ) {\n        return \"Please enter a valid house price\";\n      } else if (\n        touchedFields.value.has(\"size\") &&\n        (!house.value.size || house.value.size <= 0)\n      ) {\n        return \"Please enter a valid house size\";\n      } else if (\n        touchedFields.value.has(\"hasGarage\") &&\n        house.value.hasGarage === null\n      ) {\n        return \"Please select an option for garage\";\n      } else if (\n        touchedFields.value.has(\"bedrooms\") &&\n        (!house.value.bedrooms || house.value.bedrooms <= 0)\n      ) {\n        return \"Please enter a valid number of bedrooms\";\n      } else if (\n        touchedFields.value.has(\"bathrooms\") &&\n        (!house.value.bathrooms || house.value.bathrooms <= 0)\n      ) {\n        return \"Please enter a valid number of bathrooms\";\n      } else if (\n        touchedFields.value.has(\"constructionYear\") &&\n        (!house.value.constructionYear ||\n          house.value.constructionYear <= 0 ||\n          house.value.constructionYear > new Date().getFullYear())\n      ) {\n        return \"Please enter a valid construction year\";\n      } else if (\n        touchedFields.value.has(\"description\") &&\n        !house.value.description.trim()\n      ) {\n        return \"Please enter a valid house description\";\n      }\n      else return \"\"\n    })\n    // const isInvalid = computed(() => {\n    //   return (field) => {\n    //     let isInvalid = false;\n    //     // check if field is empty and has been touched by the user\n    //     if (field == \"hasGarage\") {\n    //       isInvalid =\n    //         !(typeof state.house[field] === \"boolean\") &&\n    //         state.touchedFields[field];\n    //       if (isInvalid) state.errorMessage = \"Please pick a garage option.\";\n    //       return isInvalid;\n    //     }\n\n    //     if (field == \"constructionYear\") {\n    //       isInvalid =\n    //         !isYearFormat(state.house.constructionYear) &&\n    //         state.touchedFields[field];\n    //       if (isInvalid)\n    //         state.errorMessage = \"Please pick a valid construction year.\";\n    //       return isInvalid;\n    //     } else isInvalid = !state.house[field] && state.touchedFields[field];\n    //     if (isInvalid)\n    //       state.errorMessage = \"Please fill out all required fields.\";\n    //     return isInvalid;\n    //   };\n    // });\n\n    const submitButtonDisabled = computed(() => {\n      const requiredFields = [\n        \"streetName\",\n        \"houseNumber\",\n        \"zip\",\n        \"city\",\n        \"price\",\n        \"size\",\n        \"bedrooms\",\n        \"bathrooms\",\n        \"constructionYear\",\n        \"description\",\n        \"hasGarage\",\n      ];\n      const isMissingField = requiredFields.some((field) => {\n        const value = state.house[field];\n        return value === undefined || value === null || value === \"\";\n      });\n      return isMissingField;\n    });\n\n    // watch(submitButtonDisabled, (newValue) => {\n    //   if (!newValue) {\n    //     state.errorMessage = \"\";\n    //   }\n    // });\n\n    function selectImage(data) {\n      context.emit(\"selectImage\", {\n        image: data.image,\n        previewImage: data.previewImage,\n      });\n    }\n\n    function isYearFormat(inputNumber) {\n      if (!inputNumber) return false;\n      // Convert inputNumber to a string\n      var inputString = inputNumber.toString();\n      // Check if inputString is a valid year format 'yyyy'\n      var yearRegex = /^\\d{4}$/;\n      if (!yearRegex.test(inputString)) return false;\n      // Check if input year is not before the current year\n      var inputYear = parseInt(inputString);\n      var currentYear = new Date().getFullYear();\n      if (!(inputYear < currentYear)) return false;\n\n      return true;\n    }\n\n    // method to set the touched status of a field to true\n    function setFieldTouched(field) {\n      state.touchedFields = {\n        ...state.touchedFields,\n        [field]: true,\n      };\n    }\n\n    function submitButtonClicked() {\n      context.emit(\"submitForm\", state.house);\n    }\n\n    onMounted(async () => {\n      if (props && props.houseId) {\n        state.house = store.getters.getByIdEditModel(props.houseId);\n      }\n    });\n\n    return {\n      ...toRefs(state),\n      submitButtonDisabled,\n\n      isInvalid,\n      setFieldTouched,\n      selectImage,\n      submitButtonClicked,\n    };\n  },\n  components: { UploadImageComponent },\n  emits: [\"selectImage\", \"submitForm\"],\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.flex {\n  display: flex;\n}\n.input-field-title {\n  margin: 10px 0;\n}\n.spacer {\n  width: 20px;\n}\n.btn-container {\n  margin: 50px 275px;\n}\n.error {\n  border: 1px solid #f00 !important;\n\n  &::placeholder {\n    color: red;\n    opacity: 1; /* Firefox */\n  }\n\n  &:-ms-input-placeholder {\n    /* Internet Explorer 10-11 */\n    color: red;\n  }\n\n  &::-ms-input-placeholder {\n    /* Microsoft Edge */\n    color: red;\n  }\n}\n.error-label {\n  color: red;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}